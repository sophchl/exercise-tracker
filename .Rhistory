# manually delete entries from other tables that do not match main table
all_rowids <- dbGetQuery(db, "SELECT rowid from responses_main")
# manually delete entries from other tables that do not match main table
all_rowids <- dbGetQuery(db, "SELECT rowid from responses_main")
all_rowids
all_rowids <- all_rowids[['rowid']]
all_rowids
tables <- dbListTables(db)
tabels
tables
type_tables <- tables[tables != "responses_main"]
type_tables
ids <- dbGetQuery(db, "SELECT id from responses_rest")
ids
# manually delete entries from other tables that do not match main table
all_rowids <- dbGetQuery(db, "SELECT rowid from responses_main")
# manually delete entries from other tables that do not match main table
rowids <- dbGetQuery(db, "SELECT rowid from responses_main")
ids
rowids
type(rowids)
class(rowids)
# find values that are in ids but not in rowids
subset(ids, (id %in% rowids$rowid))
# find values that are in ids but not in rowids
subset(ids, !(id %in% rowids$rowid))
# find values that are in ids but not in rowids
ids_delete <- subset(ids, !(id %in% rowids$rowid))
ids_delete
ids_delete$id
# find values that are in ids but not in rowids
ids_delete <- subset(ids, !(id %in% rowids$rowid)) %>% pull(id)
ids_delete
query <- "DELETE from responses_rest WHERE id IN ids_delete"
dbExecute(db, query)
query <- sprintf("DELETE from responses_rest WHERE id IN %s",
ids_delete)
query
dbExecute(db, query)
query <- sprintf("DELETE from responses_rest WHERE id IN %S",
ids_delete)
query <- sprintf("DELETE from responses_rest WHERE id IN %s",
ids_delete)
query <- sprintf("DELETE from responses_rest WHERE id IN (%s)",
ids_delete)
query
ids_delete
type(ids_delete)
class(ids_delete)
ids_string <- toString(sprintf("'%s'", ids_delete))
ids_string
query <- sprintf("DELETE from responses_rest WHERE id IN (%s)",
ids_string)
query
dbExecute(db, query)
table = "responses_rest"
paste("SELECT id from", table)
# manually delete entries from other tables that do not match main table
rowids <- dbGetQuery(db, "SELECT rowid from responses_main")
tables <- dbListTables(db)
type_tables <- tables[tables != "responses_main"]
for (table in type_tables){
# get all ids from type table
query <- paste("SELECT id from", table)
ids <- dbGetQuery(db, query)
# delete ids that are not in main table
ids_delete <- subset(ids, !(id %in% rowids$rowid)) %>% pull(id)
ids_string <- toString(sprintf("'%s'", ids_delete))
query_part_one <- paste("DELETE from", table, "WHERE")
query <- sprintf("DELETE from %s WHERE id IN (%s)",
table, ids_string)
dbExecute(db, query)
}
dbDisconnect()
dbDisconnect(db)
.rs.restartR()
## helpers for saving in SQLite database ---------
# for testing
# sqlitePath <- "shiny-exercise/data/exerciseDB.db"
# data = data.frame(matrix(c(1:4),2,2))
# type = "strength"
# date_range <- c(Sys.Date()-10, Sys.Date())
# data_test <- dbGetQuery(db, "SELECT * FROM responses_main")
sqlitePath <- "data/exerciseDB.db"
table_main <- "responses_main"
## save and load data ---------
saveDataMain <- function(data) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Construct the update query by looping over the data fields
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
table_main,
paste(names(data), collapse = ", "),
paste(data, collapse = "', '")
)
# Submit the update query and disconnect
dbExecute(db, query)
dbDisconnect(db)
}
saveDataType <- function(data, type) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Construct the update query by looping over the data fields
table_type <- paste("responses_", type, sep = "")
data_cols <- c("id", names(data))
last_row_id <- dbGetQuery(db, "SELECT rowid FROM responses_main") %>% pull(rowid) %>% last()
data_values <- c(last_row_id, data)
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
table_type,
paste(data_cols, collapse = ", "),
paste(data_values, collapse = "', '")
)
# Submit the update query and disconnect
dbExecute(db, query)
dbDisconnect(db)
}
loadDataMain <- function() {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Construct the fetching query
query <- sprintf("SELECT * FROM %s", table_main)
# Submit the fetch query and disconnect
data <- dbGetQuery(db, query)
dbDisconnect(db)
data <- data %>%
mutate(date = as.Date(date, origin = lubridate::origin))
data
}
loadDataType <- function(type) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Construct the fetching query
table_type <- paste("responses_", type, sep = "")
query <- sprintf("SELECT * FROM %s", table_type)
# Submit the fetch query and disconnect
data <- dbGetQuery(db, query)
dbDisconnect(db)
data
}
## load and plot ---------
plotExerciseLevels <- function(date_range) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# fetch the data needed
query <- sprintf("SELECT rowid,* FROM responses_main WHERE date BETWEEN %s AND %s",
date_range[1] %>% as.numeric(), date_range[2] %>% as.numeric())
data <- dbGetQuery(db, query)
# get the exercise type data
selected_rowids = data$rowid
query <-  sprintf("SELECT id,muscle FROM responses_strength WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
strength_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,endurance_type FROM responses_endurance WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
endurance_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,climbing_type FROM responses_climbing WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
climbing_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,other_type FROM responses_other WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
other_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,rest_activity FROM responses_rest WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
rest_data <- dbGetQuery(db,query)
dbDisconnect(db)
# merge data
data_all <- data %>%
left_join(strength_data, by = c("rowid" = "id")) %>%
left_join(endurance_data, by = c("rowid" = "id")) %>%
left_join(climbing_data, by = c("rowid" = "id")) %>%
left_join(other_data, by = c("rowid" = "id")) %>%
left_join(rest_data, by = c("rowid" = "id")) %>%
unite("all_types", muscle:rest_activity, na.rm = TRUE) %>%
mutate(all_types = recode(all_types, "NULL" = "none"),
duration = round(sum(duration_h, duration_m/60),2))
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
color = ~type, colors = "Set2",
text = ~paste('</br> Type: ', all_types,
'</br> Duration: ', duration, 'h'),
hovertemplate = paste('%{text}'),
marker = list(size = ~duration %>% rescale(to = c(15,30))))
plot
}
plotExerciseOverview <- function(date_range) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# fetch the data needed
query <- sprintf("SELECT rowid,* FROM responses_main WHERE date BETWEEN %s AND %s",
date_range[1] %>% as.numeric(), date_range[2] %>% as.numeric())
data <- dbGetQuery(db, query)
# get the exercise type data
selected_rowids = data$rowid
query <-  sprintf("SELECT id,muscle FROM responses_strength WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
strength_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,endurance_type FROM responses_endurance WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
endurance_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,climbing_type FROM responses_climbing WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
climbing_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,other_type FROM responses_other WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
other_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,rest_activity FROM responses_rest WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
rest_data <- dbGetQuery(db,query)
dbDisconnect(db)
# merge data
data_all <- data %>%
left_join(strength_data, by = c("rowid" = "id")) %>%
left_join(endurance_data, by = c("rowid" = "id")) %>%
left_join(climbing_data, by = c("rowid" = "id")) %>%
left_join(other_data, by = c("rowid" = "id")) %>%
left_join(rest_data, by = c("rowid" = "id")) %>%
unite("all_types", muscle:rest_activity, na.rm = TRUE) %>%
mutate(all_types = recode(all_types, "NULL" = "none"),
duration = round(sum(duration_h, duration_m/60),2))
plot <- data_all %>%
plot_ly(x = ~type, type = "histogram",
color = ~all_types, colors = "Set2") %>%
layout(barmode = "stack")
plot
}
## update and delete data ---------
updateData <- function(table, id, variable, new_value, value_is_numeric) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# query
if (value_is_numeric == TRUE){
new_value <- as.numeric(new_value)
}
if (table == "responses_main"){
query <- sprintf("UPDATE responses_main SET %s = %s WHERE rowid == %s",
variable, new_value, id)
} else {
query <- sprintf("UPDATE %s SET %s = %s WHERE id == %s",
table, variable, new_value, id)
}
dbExecute(db, query)
dbDisconnect(db)
}
deleteData <- function(id) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# query to delete from main table
query <- sprintf("DELETE FROM responses_main WHERE rowid == %s",
id)
dbExecute(db, query)
# delete matching ID in other tables
all_tables <- dbListTables(db)
type_tables <- all_tables[all_tables != "responses_main"]
for (table in type_tables){
query <- paste("DELETE from", table, "WHERE id ==", id)
dbExecute(db, query)
}
dbDisconnect(db)
}
returnRowId <- function(date){
date <- as.numeric(date)
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# query
query <- sprintf("SELECT rowid from responses_main WHERE date == %s",
date)
data <- dbGetQuery(db, query)
dbDisconnect(db)
# return rowid
rowid <- data[['rowid']]
if (length(rowid) == 0){
values <- "empty"
} else {
values <- rowid
}
output <- paste(c('The rowids for the date choosen are', values), collapse = " ")
return(output)
}
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('C:/Users/Sophia/Dropbox/01_Studium/04_projects/exercise-tracker/shiny-exercise')
runApp('C:/Users/Sophia/Dropbox/01_Studium/04_projects/exercise-tracker/shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
.rs.restartR()
## helpers for saving in SQLite database ---------
# for testing
# sqlitePath <- "shiny-exercise/data/exerciseDB.db"
# data = data.frame(matrix(c(1:4),2,2))
# type = "strength"
# date_range <- c(Sys.Date()-10, Sys.Date())
# data_test <- dbGetQuery(db, "SELECT * FROM responses_main")
sqlitePath <- "data/exerciseDB.db"
table_main <- "responses_main"
## save and load data ---------
saveDataMain <- function(data) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Construct the update query by looping over the data fields
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
table_main,
paste(names(data), collapse = ", "),
paste(data, collapse = "', '")
)
# Submit the update query and disconnect
dbExecute(db, query)
dbDisconnect(db)
}
saveDataType <- function(data, type) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Construct the update query by looping over the data fields
table_type <- paste("responses_", type, sep = "")
data_cols <- c("id", names(data))
last_row_id <- dbGetQuery(db, "SELECT rowid FROM responses_main") %>% pull(rowid) %>% last()
data_values <- c(last_row_id, data)
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
table_type,
paste(data_cols, collapse = ", "),
paste(data_values, collapse = "', '")
)
# Submit the update query and disconnect
dbExecute(db, query)
dbDisconnect(db)
}
loadDataMain <- function() {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Construct the fetching query
query <- sprintf("SELECT * FROM %s", table_main)
# Submit the fetch query and disconnect
data <- dbGetQuery(db, query)
dbDisconnect(db)
data <- data %>%
mutate(date = as.Date(date, origin = lubridate::origin))
data
}
loadDataType <- function(type) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Construct the fetching query
table_type <- paste("responses_", type, sep = "")
query <- sprintf("SELECT * FROM %s", table_type)
# Submit the fetch query and disconnect
data <- dbGetQuery(db, query)
dbDisconnect(db)
data
}
## load and plot ---------
plotExerciseLevels <- function(date_range) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# fetch the data needed
query <- sprintf("SELECT rowid,* FROM responses_main WHERE date BETWEEN %s AND %s",
date_range[1] %>% as.numeric(), date_range[2] %>% as.numeric())
data <- dbGetQuery(db, query)
# get the exercise type data
selected_rowids = data$rowid
query <-  sprintf("SELECT id,muscle FROM responses_strength WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
strength_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,endurance_type FROM responses_endurance WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
endurance_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,climbing_type FROM responses_climbing WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
climbing_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,other_type FROM responses_other WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
other_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,rest_activity FROM responses_rest WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
rest_data <- dbGetQuery(db,query)
dbDisconnect(db)
# merge data
data_all <- data %>%
left_join(strength_data, by = c("rowid" = "id")) %>%
left_join(endurance_data, by = c("rowid" = "id")) %>%
left_join(climbing_data, by = c("rowid" = "id")) %>%
left_join(other_data, by = c("rowid" = "id")) %>%
left_join(rest_data, by = c("rowid" = "id")) %>%
unite("all_types", muscle:rest_activity, na.rm = TRUE) %>%
mutate(all_types = recode(all_types, "NULL" = "none"),
duration = round(sum(duration_h, duration_m/60),2))
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
color = ~type, colors = "Set2",
text = ~paste('</br> Type: ', all_types,
'</br> Duration: ', duration, 'h'),
hovertemplate = paste('%{text}'),
marker = list(size = ~duration %>% rescale(to = c(15,30))))
plot
}
plotExerciseOverview <- function(date_range) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# fetch the data needed
query <- sprintf("SELECT rowid,* FROM responses_main WHERE date BETWEEN %s AND %s",
date_range[1] %>% as.numeric(), date_range[2] %>% as.numeric())
data <- dbGetQuery(db, query)
# get the exercise type data
selected_rowids = data$rowid
query <-  sprintf("SELECT id,muscle FROM responses_strength WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
strength_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,endurance_type FROM responses_endurance WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
endurance_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,climbing_type FROM responses_climbing WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
climbing_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,other_type FROM responses_other WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
other_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,rest_activity FROM responses_rest WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
rest_data <- dbGetQuery(db,query)
dbDisconnect(db)
# merge data
data_all <- data %>%
left_join(strength_data, by = c("rowid" = "id")) %>%
left_join(endurance_data, by = c("rowid" = "id")) %>%
left_join(climbing_data, by = c("rowid" = "id")) %>%
left_join(other_data, by = c("rowid" = "id")) %>%
left_join(rest_data, by = c("rowid" = "id")) %>%
unite("all_types", muscle:rest_activity, na.rm = TRUE) %>%
mutate(all_types = recode(all_types, "NULL" = "none"),
duration = round(sum(duration_h, duration_m/60),2))
plot <- data_all %>%
plot_ly(x = ~type, type = "histogram",
color = ~all_types, colors = "Set2") %>%
layout(barmode = "stack")
plot
}
## update and delete data ---------
updateData <- function(table, id, variable, new_value, value_is_numeric) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# query
if (value_is_numeric == TRUE){
new_value <- as.numeric(new_value)
}
if (table == "responses_main"){
query <- sprintf("UPDATE responses_main SET %s = %s WHERE rowid == %s",
variable, new_value, id)
} else {
query <- sprintf("UPDATE %s SET %s = %s WHERE id == %s",
table, variable, new_value, id)
}
dbExecute(db, query)
dbDisconnect(db)
}
deleteData <- function(id) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# query to delete from main table
query <- sprintf("DELETE FROM responses_main WHERE rowid == %s",
id)
dbExecute(db, query)
# delete matching ID in other tables
all_tables <- dbListTables(db)
type_tables <- all_tables[all_tables != "responses_main"]
for (table in type_tables){
query <- paste("DELETE from", table, "WHERE id ==", id)
dbExecute(db, query)
}
dbDisconnect(db)
}
returnRowId <- function(date){
date <- as.numeric(date)
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# query
query <- sprintf("SELECT rowid from responses_main WHERE date == %s",
date)
data <- dbGetQuery(db, query)
dbDisconnect(db)
# return rowid
rowid <- data[['rowid']]
if (length(rowid) == 0){
values <- "empty"
} else {
values <- rowid
}
output <- paste(c('The rowids for the date choosen are', values), collapse = " ")
return(output)
}
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
