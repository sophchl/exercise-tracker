get(responses_type) <<- rbind(get(responses_type), data)
} else {
eval(call("<<-", as.name(responses_type), data))
}
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
get(responses_type) <<- rbind(get(responses_type), data)
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
saveDataType(matrix(c(1:4),2,2), "strength")
responses_strength
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
get(responses_type) <<- rbind(get(responses_type), data)
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
saveDataType(matrix(c(1:4),2,2), "strength")
quote("response_type")
as.name(response_type)
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
as.name(responses_type) <<- rbind(as.name(responses_type), data)
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
rm(responses_strength)
rm(list = ls())
test = matrix(c(1:4),2,2)
type = "strength"
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
as.name(responses_type) <<- rbind(as.name(responses_type), data)
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
saveDataType(test, type)
saveDataType(test, type)
response_type
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
responses_type = paste("reponses_", type, sep = "")
data = test
data <- as.data.frame(t(data))
as.name(responses_type)
rbind(as.name(responses_type), data)
as.name(responses_type
)
as.name(responses_type) %>% class()
as.name(responses_type) %>% typeof()
quote(responses_type) %>% class()
quote(responses_type) %>% typeof()
eval(call("rbind", as.name(responses_type), data))
as.name(responses_type) <<- eval(call("rbind", as.name(responses_type), data))
as.name(responses_type)
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
loadDataType <- function(type) {
responses_type = paste("reponses_", type, sep = "")
if (exists(responses_type)) {
get(responses_type)
}
}
loadDataType("strength")
rm(list = ls())
## my helpers for saving locally
saveDataMain <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses_main")) {
responses_main <<- rbind(responses_main, data)
} else {
responses_main <<- data
}
}
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
loadDataMain <- function() {
if (exists("responses_main")) {
responses_main
}
}
loadDataStrength <- function() {
if (exists("responses_strength")) {
responses_strength
}
}
loadDataType <- function(type) {
responses_type = paste("reponses_", type, sep = "")
if (exists(responses_type)) {
get(responses_type)
}
}
runApp('shiny-exercise')
runApp('shiny-exercise')
rm(list = ls())
## my helpers for saving locally ---------
saveDataMain <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses_main")) {
responses_main <<- rbind(responses_main, data)
} else {
responses_main <<- data
}
}
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
loadDataMain <- function() {
if (exists("responses_main")) {
responses_main
}
}
loadDataStrength <- function() {
if (exists("responses_strength")) {
responses_strength
}
}
loadDataType <- function(type) {
responses_type = paste("reponses_", type, sep = "")
if (exists(responses_type)) {
get(responses_type)
}
}
runApp('shiny-exercise')
runApp('shiny-exercise')
saveDataMain <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses_main")) {
responses_main <<- rbind(responses_main, data)
} else {
responses_main <<- data
}
}
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
loadDataMain <- function() {
if (exists("responses_main")) {
responses_main
}
}
loadDataStrength <- function() {
if (exists("responses_strength")) {
responses_strength
} else {
as.data.frame(matrix(c(1:4),2,2))
}
}
loadDataType <- function(type) {
responses_type = paste("reponses_", type, sep = "")
if (exists(responses_type)) {
get(responses_type)
}
}
runApp('shiny-exercise')
rm(list = ls())
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
saveDataMain <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses_main")) {
responses_main <<- rbind(responses_main, data)
} else {
responses_main <<- data
}
}
data = matrix(c(1:4),2,2)
saveDataMain(data)
responses_main
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
saveDataType(data, "strength")
responses_strength
responses_type = paste("reponses_", type, sep = "")
type = "strength"
responses_type = paste("reponses_", type, sep = "")
call("<<-", as.name(responses_type), data)
eval(call("<<-", as.name(responses_type), data))
responses_strength
exists(responses_strength)
exists(respones_main)
exists(responses_main)
exists(type)
exists(responses_main)
exists(data)
exists(data)
exists(type)
exists("data")
exists("type")
exists("responses_main")
exists("responses_strength")
View(reponses_strength)
exists(responses_type)
responses_type
get(responses_type)
as.name(responses_type)
responses_main
test <- get(responses_type)
test
test <<- get(responses_type)
test
rm(list = ls())
test = matrix(c(1:4),2,2)
type = "strength"
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", get(responses_type), data))
}
}
saveDataType(test, type)
data = test
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
exists(reponses_type)
responses_type
exists(responses_type)
get(responses_type)
as.name(responses_type)
eval(call("<<-", as.name(responses_type), data))
responses_type
get(responses_type)
exists(responses_type)
eval(call("rbind", as.name(responses_type), data))
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
responses_type
get(responses_type)
exists("responses_strength")
responses_strength <- NULL
rm(list = ls())
saveDataType <- function(data, type) {
responses_strength <- NULL
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
test = matrix(c(1:4),2,2)
type = "strength"
saveDataType(test, type)
exists("responses_strength")
exsts(responses_type)
exists(responses_type)
data = test
responses_strength <- NULL
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
exists(responses_type)
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
exists("responses_strength")
responses_strength
rm(list=ls())
saveDataType <- function(data, type) {
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
test = matrix(c(1:4),2,2)
type = "strength"
test2 = data.frame()
test2
saveDataType <- function(data, type) {
responses_strength <- data.frame()
responses_type = paste("reponses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
test = matrix(c(1:4),2,2)
type = "strength"
responses_strength <- data.frame()
responses_type = paste("reponses_", type, sep = "")
exists(responses_type)
exists(responses_type)
data <- as.data.frame(t(data))
eval(call("<<-", as.name(responses_type), data))
data <- as.data.frame(t(data))
eval(call("<<-", as.name(responses_type), data))
data = matrix(c(1:4),2,2)
data <- as.data.frame(t(data))
eval(call("<<-", as.name(responses_type), data))
rm(list = ls())
saveDataType <- function(data, type) {
responses_type = paste("responses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
data = matrix(c(1:4),2,2)
type = "strength"
saveDataType(data, type)
exists("responses_strength")
rm(list = ls())
## my helpers for saving locally ---------
saveDataMain <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses_main")) {
responses_main <<- rbind(responses_main, data)
} else {
responses_main <<- data
}
}
saveDataType <- function(data, type) {
responses_type = paste("responses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
loadDataMain <- function() {
if (exists("responses_main")) {
responses_main
}
}
loadDataStrength <- function() {
if (exists("responses_strength")) {
responses_strength
} else {
as.data.frame(matrix(c(1:4),2,2))
}
}
loadDataType <- function(type) {
responses_type = paste("reponses_", type, sep = "")
if (exists(responses_type)) {
get(responses_type)
}
}
runApp('shiny-exercise')
## my helpers for saving locally ---------
saveDataMain <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses_main")) {
responses_main <<- rbind(responses_main, data)
} else {
responses_main <<- data
}
}
saveDataType <- function(data, type) {
responses_type = paste("responses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
loadDataMain <- function() {
if (exists("responses_main")) {
responses_main
}
}
loadDataStrength <- function() {
if (exists("responses_strength")) {
responses_strength
}
}
loadDataType <- function(type) {
responses_type = paste("reponses_", type, sep = "")
if (exists(responses_type)) {
as.name(responses_type)
}
}
runApp('shiny-exercise')
rm(list = ls())
## my helpers for saving locally ---------
saveDataMain <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses_main")) {
responses_main <<- rbind(responses_main, data)
} else {
responses_main <<- data
}
}
saveDataType <- function(data, type) {
responses_type = paste("responses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
loadDataMain <- function() {
if (exists("responses_main")) {
responses_main
}
}
loadDataStrength <- function() {
if (exists("responses_strength")) {
responses_strength
}
}
loadDataType <- function(type) {
responses_type = paste("reponses_", type, sep = "")
if (exists(responses_type)) {
as.name(responses_type)
}
}
runApp('shiny-exercise')
type = "endurance"
loadDataType(type)
responses_type = paste("reponses_", type, sep = "")
exists(responses_type)
responses_type
rm(list = ls())
## my helpers for saving locally ---------
saveDataMain <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses_main")) {
responses_main <<- rbind(responses_main, data)
} else {
responses_main <<- data
}
}
saveDataType <- function(data, type) {
responses_type = paste("responses_", type, sep = "")
data <- as.data.frame(t(data))
if (exists(responses_type)) {
eval(call("<<-", as.name(responses_type), eval(call("rbind", as.name(responses_type), data))))
} else {
eval(call("<<-", as.name(responses_type), data))
}
}
loadDataMain <- function() {
if (exists("responses_main")) {
responses_main
}
}
loadDataStrength <- function() {
if (exists("responses_strength")) {
responses_strength
}
}
loadDataType <- function(type) {
responses_type = paste("responses_", type, sep = "")
if (exists(responses_type)) {
as.name(responses_type)
}
}
runApp('shiny-exercise')
