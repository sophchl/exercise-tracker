## update ---------
updateData <- function(table, id, variable, new_value, value_is_numeric) {
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# query
if(value_is_numeric == TRUE){
new_value <- as.numeric(new_value)
}
if (table == "responses_main"){
query <- sprintf("UPDATE responses_main SET %s = %s WHERE rowid == %s",
variable, new_value, id)
} else {
query <- sprintf("UPDATE %s SET %s = %s WHERE id == %s",
table, variable, new_value, id)
}
dbSendQuery(db, query)
dbDisconnect(db)
}
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
color = ~type, colors = "Set2",
text = ~paste('</br> Type: ', all_types,
'</br> Duration: ', duration, 'h'),
hovertemplate = paste('%{text}'),
marker = list(size = ~duration %>% rescale(to = c(15,30))))
plot
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
color = ~type, colors = "Set2",
text = ~paste('</br> Type: ', all_types,
'</br> Duration: ', duration, 'h'),
hovertemplate = paste('%{text}'),
marker = list(size = ~duration %>% rescale(to = c(15,30)))) %>%
add_text()
plot
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
color = ~type, colors = "Set2",
text = ~paste('</br> Type: ', all_types,
'</br> Duration: ', duration, 'h'),
hovertemplate = paste('%{text}'),
marker = list(size = ~duration %>% rescale(to = c(15,30)))) %>%
add_text(textposition = "top right")
plot
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
color = ~type, colors = "Set2",
text = ~all_types,
hovertemplate = paste('%{text}'),
marker = list(size = ~duration %>% rescale(to = c(15,30)))) %>%
add_text(textposition = "top right")
plot
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
color = ~type, colors = "Set2",
text = ~all_types,
hovertemplate = paste('Type: ', '%{text}'),
marker = list(size = ~duration %>% rescale(to = c(15,30)))) %>%
add_text(textposition = "top right")
plot
add_markers(marker = list(size = ~duration %>% rescale(to = c(15,30)))) %>%
add_text(textposition = "top right")
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
color = ~type, colors = "Set2",
text = ~all_types,
hovertemplate = paste('Type: ', '%{text}')) %>%
add_markers(marker = list(size = ~duration %>% rescale(to = c(15,30)))) %>%
add_text(textposition = "top right")
plot
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
color = ~type, colors = "Set2",
text = ~all_types,
hovertemplate = paste('Type: ', '%{text}')) %>%
add_markers(marker = list(size = ~duration %>% rescale(to = c(15,30)))) %>%
add_text(text = text, textposition = "top right")
plot
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
color = ~type, colors = "Set2",
text = ~all_types,
hovertemplate = paste('Type: ', '%{text}')) %>%
add_markers(marker = list(size = ~duration %>% rescale(to = c(15,30))))
plot
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
text = ~all_types,
hovertemplate = paste('Type: ', '%{text}')) %>%
add_markers(marker = list(size = ~duration %>% rescale(to = c(15,30)),
color = ~type, colors = "Set2", ))
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
text = ~all_types,
hovertemplate = paste('Type: ', '%{text}')) %>%
add_markers(marker = list(size = ~duration %>% rescale(to = c(15,30)),
color = ~type, colors = "Set2"))
plot
# plot data
plot <- data_all %>%
mutate(level = factor(level,
levels = c("very_low", "low", "medium", "high", "very_high", "extreme"),
labels = c("very low", "low", "medium", "high", "very high", "extreme"),
ordered = TRUE),
date = as.Date(date, origin = lubridate::origin)) %>%
plot_ly(x = ~date, y = ~level, type = "scatter", mode = "markers",
color = ~type, colors = "Set2",
text = ~paste('</br> Type: ', all_types,
'</br> Duration: ', duration, 'h'),
hovertemplate = paste('%{text}'),
marker = list(size = ~duration %>% rescale(to = c(15,30))))
plot
data_all
date_range
data_all
data
# merge data
data_all <- data %>%
left_join(strength_data, by = c("rowid" = "id")) %>%
left_join(endurance_data, by = c("rowid" = "id")) %>%
left_join(climbing_data, by = c("rowid" = "id")) %>%
left_join(other_data, by = c("rowid" = "id")) %>%
left_join(rest_data, by = c("rowid" = "id")) %>%
unite("all_types", muscle:rest_activity, na.rm = TRUE)
data_all
# merge data
data_all <- data %>%
left_join(strength_data, by = c("rowid" = "id")) %>%
left_join(endurance_data, by = c("rowid" = "id")) %>%
left_join(climbing_data, by = c("rowid" = "id")) %>%
left_join(other_data, by = c("rowid" = "id")) %>%
left_join(rest_data, by = c("rowid" = "id"))
data_all
data_all %>%
plot_ly(y = ~type, type = "bar")
data_all %>%
plot_ly(x = ~type, type = "bar")
data_all %>%
plot_ly(x = ~type, type = "histogram")
data_all %>%
plot_ly(x = ~type, type = "histogram", color = ~type_all, barmode = "group")
# merge data
data_all <- data %>%
left_join(strength_data, by = c("rowid" = "id")) %>%
left_join(endurance_data, by = c("rowid" = "id")) %>%
left_join(climbing_data, by = c("rowid" = "id")) %>%
left_join(other_data, by = c("rowid" = "id")) %>%
left_join(rest_data, by = c("rowid" = "id")) %>%
unite("all_types", muscle:rest_activity, na.rm = TRUE) %>%
mutate(all_types = recode(all_types, "NULL" = "none"))
data_all %>%
plot_ly(x = ~type, type = "histogram", color = ~type_all, barmode = "group")
data_all %>%
plot_ly(x = ~type, type = "histogram", color = ~all_typesl barmode = "group")
data_all %>%
plot_ly(x = ~type, type = "histogram", color = ~all_types, barmode = "group")
data_all %>%
plot_ly(x = ~type, type = "histogram", color = ~all_types) %>%
layout(barmode = "overlay")
data_all %>%
plot_ly(x = ~type, type = "histogram", color = ~all_types) %>%
layout(barmode = "overlay", yaxis = list(type = "linear"))
data_all %>%
plot_ly(x = ~type, type = "histogram", color = ~all_types) %>%
layout(barmode = "overlay")
plot
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/ShinyExercise/create_database.R', echo=TRUE)
runApp('shiny-exercise')
sqlitePath <- "shiny-exercise/data/exerciseDB.db"
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
dbGetQuery(db, "SELECT * FROM responses_main")
data %>% mutate(duration = sum(duration_h, duration_m/60))
data
data <- dbGetQuery(db, "SELECT * FROM responses_main")
data
data %>% mutate(duration = sum("duration_h", "duration_m"/60))
data$duration_h %>% class()
data %>% mutate(duration = sum(duration_h, duration_m))
data %>% mutate(duration = sum(duration_h, duration_m/60))
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
runApp('shiny-exercise')
dat
data
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/ShinyExercise/create_database.R', echo=TRUE)
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
shiny::runApp('shiny-exercise')
runApp('shiny-exercise')
library(scale)
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
table = "responses_climbing"
variable = "focus"
new_value = "just_climbing"
id = 2
query <- sprintf("UPDATE %s SET %s = %s WHERE id == %s",
table, variable, new_value, id)
query
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
shiny::runApp('shiny-exercise')
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
shiny::runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
sqlitePath <- "shiny-exercise/data/exerciseDB.db"
date_range <- c(Sys.Date()-10, Sys.Date())
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# fetch the data needed
query <- sprintf("SELECT rowid,* FROM responses_main WHERE date BETWEEN %s AND %s",
date_range[1] %>% as.numeric(), date_range[2] %>% as.numeric())
data <- dbGetQuery(db, query)
# get the exercise type data
selected_rowids = data$rowid
query <-  sprintf("SELECT id,muscle FROM responses_strength WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
strength_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,endurance_type FROM responses_endurance WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
endurance_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,climbing_type FROM responses_climbing WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
climbing_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,other_type FROM responses_other WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
other_data <- dbGetQuery(db,query)
query <-  sprintf("SELECT id,rest_activity FROM responses_rest WHERE id BETWEEN %s AND %s",
selected_rowids[1], selected_rowids %>% tail(1))
rest_data <- dbGetQuery(db,query)
dbDisconnect(db)
# merge data
data_all <- data %>%
left_join(strength_data, by = c("rowid" = "id")) %>%
left_join(endurance_data, by = c("rowid" = "id")) %>%
left_join(climbing_data, by = c("rowid" = "id")) %>%
left_join(other_data, by = c("rowid" = "id")) %>%
left_join(rest_data, by = c("rowid" = "id")) %>%
unite("all_types", muscle:rest_activity, na.rm = TRUE) %>%
mutate(all_types = recode(all_types, "NULL" = "none"),
duration = round(sum(duration_h, duration_m/60),2))
plot <- data_all %>%
plot_ly(x = ~all_types, type = "histogram", color = ~type) %>%
layout(barmode = "stack")
plot
plot <- data_all %>%
plot_ly(x = ~types, type = "histogram", color = ~all_types) %>%
layout(barmode = "stack")
plot
plot <- data_all %>%
plot_ly(x = ~type, y = ~ntype = "bar", color = ~all_types) %>%
layout(barmode = "stack")
plot <- data_all %>%
plot_ly(x = ~type, type = "histogram", color = ~all_types) %>%
layout(barmode = "stack")
plot
plot <- data_all %>%
plot_ly(x = ~type, type = "histogram", color = ~all_types,
colors = "Set2") %>%
layout(barmode = "stack")
plot
plot <- data_all %>%
plot_ly(x = ~type, type = "histogram",
color = ~all_types, colors = "Set2") %>%
layout(barmode = "stack")
plot <- data_all %>%
plot_ly(x = ~type, type = "histogram",
color = ~all_types, colors = "Set1") %>%
layout(barmode = "stack")
plot
plot <- data_all %>%
plot_ly(x = ~type, type = "histogram",
color = ~all_types, colors = "Set2") %>%
layout(barmode = "stack")
plot
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
runApp('C:/Users/Sophia/Dropbox/01_Studium/04_projects/ShinyExercise/shiny-exercise')
runApp('C:/Users/Sophia/Dropbox/01_Studium/04_projects/ShinyExercise/shiny-exercise')
runApp('shiny-exercise')
data_test <- dbGetQuery(db, "SELECT * FROM responses_main")
shiny-exercise/data/exerciseDB.db"
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
data_test <- dbGetQuery(db, "SELECT * FROM responses_main")
data_test <- dbGetQuery(db, "SELECT * FROM responses_main")
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
sqlitePath <- "shiny-exercise/data/exerciseDB.db"
sqlitePath <- "data/exerciseDB.db"
sqlitePath <- "shiny-exercise/data/exerciseDB.db"
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
data_test <- dbGetQuery(db, "SELECT * FROM responses_main")
data_test
as.Date(as.numeric("2021-04-03"))
as.numeric(as.Date("2021-04-03"))
as.numeric(as.Date("2021-04-02"))
runApp('shiny-exercise')
dbDisconnect(db)
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
shiny::runApp('shiny-exercise')
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
shiny::runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
shiny::runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
shiny::runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
shiny::runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
shiny::runApp('shiny-exercise')
runApp('shiny-exercise')
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
shiny::runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
shiny::runApp('shiny-exercise')
sqlitePath <- "data/exerciseDB.db"
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
library(shiny)
library(bslib)
library(shiny)
library(dplyr)
library(tidyr)
library(RSQLite)
library(ggplot2)
library(plotly)
library(scales)
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
sqlitePath <- "data/exerciseDB.db"
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
library(shiny)
library(bslib)
library(shiny)
library(dplyr)
library(tidyr)
library(RSQLite)
library(ggplot2)
library(plotly)
library(scales)
sqlitePath <- "data/exerciseDB.db"
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
getwd()
sqlitePath <- "shiny-exercise/data/exerciseDB.db"
# Connect to the database
db <- dbConnect(SQLite(), sqlitePath)
dbGetQuery(db, listTables)
dbListTables(db)
# to remove values from database
# db <- dbConnect(RSQLite::SQLite(), "shiny-exercise/data/exerciseDB.db")
all_my_tables <- dbListTables(db)
for (t in all_my_tables){
print(t)
}
all_dates <- dbGetQuery(db, "SELECT date FROM responess_main")
all_dates <- dbGetQuery(db, "SELECT date FROM responses_main")
all_dates
all_dates %>% as.Date
all_dates %>% as.Date()
all_dates %>% as.numeric() %>% as.Date()
all_dates %>% class()
all_dates %>% pull(date) %>%  class()
all_dates %>% pull(date) %>% as.Date()
all_dates %>% pull(date) %>% as.Date(orhin = lubridate::origin)
all_dates %>% pull(date) %>% as.Date(orhin = lubridate::origin())
all_dates %>% pull(date) %>% as.Date(origin = lubridate::origin())
all_dates %>% pull(date) %>% as.Date(origin = lubridate::origin
)
all_dates <- dbGetQuery(db, "SELECT date FROM responses_main") %>%
as.Date(origin = lubridate::origin)
all_dates <- dbGetQuery(db, "SELECT date FROM responses_main") %>%
pull(date) %>%
as.Date(origin = lubridate::origin)
all_dates
dates_keep <- all_dates[:10]
all_dates[:10]
all_dates[1:2]
dates_keep <- all_dates[1:7]
dates_keep
min(dates_keep)
smallest_date <- min(dates_keep) %>% as.numeric()
largest_date <- max(dates_keep) %>% as.numeric()
dbGetQuery(db,"DELETE FROM responses_main WHERE date < smallest_date OR date > largest_date")
query <- sprintf("DELETE FROM responses_main WHERE date < %s OR date > %s",
smallest_date, largest_date)
query
dbExecute(db, query)
all_dates <- dbGetQuery(db, "SELECT date FROM responses_main") %>%
pull(date) %>%
as.Date(origin = lubridate::origin)
all_dates
all_my_other_tables <- dbListTables(db)
all_my_other_tables.drop("responses_main")
all_my_other_tables <- dbListTables(db)[dbListTables(db) != "responses_main"]
all_my_other_table
all_my_other_tables
t = "responses_climbing"
query <- sprintf("DELETE FROM %s WHERE id IN (SELECT %s.id FROM %s LEFT JOIN responses_main ON %s.id=responses_main.rowid WHERE responses_main.rowid IS NULL)",
t,t,t,t)
query
dbExecute(db, query)
all_my_other_tables <- dbListTables(db)[dbListTables(db) != "responses_main"]
for (t in all_my_other_tables){
query <- sprintf("DELETE FROM %s WHERE id IN (SELECT %s.id FROM %s LEFT JOIN responses_main ON %s.id=responses_main.rowid WHERE responses_main.rowid IS NULL)",
t,t,t,t)
dbExecute(db, query)
}
runApp('shiny-exercise')
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
dbDisconnect(db)
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/ShinyExercise/helpers_rsqlite.R', echo=TRUE)
runApp('shiny-exercise')
